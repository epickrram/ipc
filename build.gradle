/*
 * Copyright 2013 Mark Price
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'

defaultTasks 'build'

group = 'com.epickrram'
version = new Version(major: 0, revision: 1)

ext {
    fullName = 'Off-Heap IPC Framework'
    fullDescription = 'Off-Heap IPC Framework'
    teamName = ''
    siteUrl = 'http://github.com/epickrram'
    sourceUrl = ''

    javaCompilerExecutable = System.env['JAVA_HOME'] ? System.env['JAVA_HOME'] + '/bin/javac' : 'javac'

}

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.5', 'org.mockito:mockito-all:1.8.4'
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

tasks.withType(Compile) {
    options.compilerArgs
    options.debug = true
    options.fork = true
    options.forkOptions.executable = javaCompilerExecutable
    options.warnings = false
}

javadoc {
    title = '<h1>epickrram IPC</h1>'

    options.addStringOption('XDignore.symbol.file', '-quiet')
    options.author = true
    options.bottom = "<i>Copyright &#169; 2011 - ${Calendar.instance[Calendar.YEAR]} Mark Price. All Rights Reserved.</i>"
    options.use = true
    options.version = true
    options.windowTitle = 'epickrram IPC API'
}

jar {
    manifest.attributes('Built-By': System.properties['user.name'],
                        'Bundle-Name': fullName,
                        'Bundle-Vendor': teamName,
                        'Bundle-Description': fullDescription,
                        'Bundle-DocURL': siteUrl)
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.5'
}

class Version {
    int major, minor = 0, revision = 0
    boolean snapshot
    String stage

    String toString() {
        "$major.$minor.$revision${stage ? '.' + stage : ''}${snapshot ? '-SNAPSHOT' : ''}"
    }
}
